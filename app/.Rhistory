shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('app - 複製.R')
library(shiny); runApp('app - 複製.R')
runApp('app - 複製.R')
runApp('app - 複製.R')
library(shiny); runApp('app - 複製.R')
library(shiny); runApp('app - 複製.R')
library(shiny); runApp('app - 複製.R')
library(shiny); runApp('app - 複製.R')
#output_distPlot <-  {ggplot(data=sample)}
#input = "AMT_ANNUITY"
#input2 = "CONTRACT_TYPE"
select1<-select(sample,input)
library(shiny)
library(ggplot2)
library(plotly)
sample <- read.csv("./SampleData.csv")
sample$TARGET = as.character(sample$TARGET)
input_bins = 30
input = "AMT_ANNUITY"
input2 = "CONTRACT_TYPE"
select1<-select(sample,input)
select2<-select(sample,input2)
#output_distPlot <-  {ggplot(data=sample)}
#input = "AMT_ANNUITY"
#input2 = "CONTRACT_TYPE"
select1<-select(sample,input)
select2<-select(sample,input2)
if (is.character(select1[1,1])) {
if (is.character(select2[1,1])){
output_distPlot <- ggplot(data = sample) + geom_count(
aes(x=get(input$varible1), y = get(input$varible2))
)
} else {
output_distPlot <- ggplot(data = sample) + geom_col(
aes(x=get(input$varible1), y = get(input$varible2))
)
}
} else {
if (is.character(select2[1,1])){
output_distPlot <- ggplot(data = sample) + geom_col(
aes(x=get(input$varible1), y = get(input$varible2))
)
}else{
output_distPlot <- ggplot(data = sample) + geom_smooth(
aes(x=get(input$varible1), y = get(input$varible2))
)
}
}
#output_distPlot
shiny::runApp()
library(shiny)
library(ggplot2)
library(plotly)
sample <- read.csv("./SampleData.csv")
sample$TARGET = as.character(sample$TARGET)
input_bins = 30
input = "AMT_ANNUITY"
input2 = "CONTRACT_TYPE"
select1<-select(sample,input)
select2<-select(sample,input2)
#output_distPlot <-  {ggplot(data=sample)}
#input = "AMT_ANNUITY"
#input2 = "CONTRACT_TYPE"
select1<-select(sample,input)
select2<-select(sample,input2)
if (is.character(select1[1,1])) {
if (is.character(select2[1,1])){
output_distPlot <- ggplot(data = sample) + geom_count(
aes(x=get(input$varible1), y = get(input$varible2))
)
} else {
output_distPlot <- ggplot(data = sample) + geom_col(
aes(x=get(input$varible1), y = get(input$varible2))
)
}
} else {
if (is.character(select2[1,1])){
output_distPlot <- ggplot(data = sample) + geom_col(
aes(x=get(input$varible1), y = get(input$varible2))
)
}else{
output_distPlot <- ggplot(data = sample) + geom_smooth(
aes(x=get(input$varible1), y = get(input$varible2))
)
}
}
#output_distPlot
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp('app - 複製 - 複製.R')
runApp()
library(shiny); runApp('app - 複製.R')
runApp('app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/copy')
library(shiny); runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
sample2
sample2 <- read.csv(. %//% "support/SampleData2.csv")
sample2$TARGET <- as.character(sample2$TARGET)
sample <- read.csv(. %//% "support/SampleData.csv")
sample$TARGET <- as.character(sample$TARGET)
sample <- read.csv("./support/SampleData.csv")
sample$TARGET <- as.character(sample$TARGET)
sample <- read.csv(".app/support/SampleData.csv")
sample$TARGET <- as.character(sample$TARGET)
sample <- read.csv("./SampleData.csv")
sample$TARGET <- as.character(sample$TARGET)
sample <- read.csv("C:\Users\Ham\Desktop\github\econDV-app\myEcon\app\SampleData.csv")
sample$TARGET <- as.character(sample$TARGET)
sample <- read.csv("C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/SampleData.csv")
sample$TARGET <- as.character(sample$TARGET)
View(sample)
library(shiny); runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
runApp('C:/Users/Ham/Desktop/github/econDV-app/myEcon/app/app - 複製.R')
library(shiny); runApp('app - 複製.R')
library(shiny); runApp('app_final.R')
runApp('app_final.R')
x <- matrix(0,N,1)
N = 1000
x <- matrix(0,N,1)
View(x)
View(x)
patterns <- createExamplePatterns(generate_new_data=T, L=2000)
createExamplePatterns <- function(generate_new_data=F, L=1500,
folder_path='data/periodic patterns/'){
suppressPackageStartupMessages(library('numbers')) # mod() function
paths <- paste0(folder_path, c("sin1.txt",
"sin2.txt",
"5periodic1.txt",
"5periodic2.txt"))
if(generate_new_data){
### sin with period 2pi/8.83
sin1 <- matrix(sin(2*pi*(1:L)/8.8342522),L,1)
write.table(sin1, file = paths[1], row.names=FALSE, col.names=FALSE)
### sin with period 2pi/9.93
sin2 <- matrix(sin(2*pi*(1:L)/9.8342522),L,1)
write.table(sin2, file = paths[2], row.names=FALSE, col.names=FALSE)
### 5-periodic pattern random points
random_points <- runif(5)
random_points <- 1.8*(random_points-min(random_points))/(max(random_points)-min(random_points))-0.9;
five_periodic1 <- matrix(random_points[mod((1:L)-1,5)+1],L,1)
write.table(five_periodic1, file = paths[3], row.names=FALSE, col.names=FALSE)
### 5-periodic pattern random points + pertubation
pertubation <- rnorm(5)
random_pointsPert <- random_points + 0.2 * pertubation
random_pointsPert <- 1.8*(random_pointsPert-min(random_pointsPert))/(max(random_pointsPert)-min(random_pointsPert))-0.9;
five_periodic2 <- matrix(random_pointsPert[mod((1:L)-1,5)+1],L,1)
write.table(five_periodic2, file = paths[4], row.names=FALSE, col.names=FALSE)
}
sin1 <- as.matrix(read.table(paths[1]))
sin2 <- as.matrix(read.table(paths[2]))
five_periodic1 <- as.matrix(read.table(paths[3]))
five_periodic2 <- as.matrix(read.table(paths[4]))
patterns <- list('sin 8.83'=sin1, 'sin 9.83'=sin2,
'5-periodic'=five_periodic1, '5-periodic+pertubation'=five_periodic2)
return(patterns)
}
patterns <- createExamplePatterns(generate_new_data=T, L=2000)
install.packages("numbers")
patterns <- createExamplePatterns(generate_new_data=T, L=2000)
patterns <- createExamplePatterns(generate_new_data=T, L=2000,folder_path='C:\Users\Ham\Desktop\codes')
patterns <- createExamplePatterns(generate_new_data=T, L=2000,folder_path="./codes")
View(patterns)
n_points <- sapply(patterns, FUN = function(x) dim(x)[1]) # length of each pattern
y = dim(patterns)
y = dim(patterns)[0]
y = dim(patterns)[1]
dim(patterns)[1]
y = dim(patterns[1])[1]
patterns[1]
y = dim(patterns[1])
y<-dim(patterns[1])
y <- dim(patterns[1])
y <- dim(patterns)
patterns
dim(patterns)
View(patterns)
y <- length(patterns)
View(patterns)
y <- length(patterns[1])
y <- length(patterns[1][1])
y <- length(patterns[1][1])
y <- length(patterns[[1]])
y
R <- list()
all_training_output <- c()
return(kfi)
kk <- function(g) (1/sqrt(2*pi))*exp(-0.5*g^2)
kk <- function(g) (1/sqrt(2*pi))*exp(-0.5*g^2)
ty <- matrix(10, ncol = 1, nrow = 10)
ey <- matrix(5, ncol = 1, nrow = 1)
tx <- matrix(5, ncol = 2, nrow = 10)
ex <- matrix(1, ncol = 2, nrow = 1)
h <- c(1,1)
kk <- function(g) (1/sqrt(2*pi))*exp(-0.5*g^2)
llls <- function(ty,tx,h,ey,ex){
n <- length(ty)
ne <- length(ey)
q <- ncol(tx)
q1 <- q+1
ones <- rep(1,n)
thetahat <- matrix(0,ncol=ne,nrow=q1)
for(e in 1:ne){
K <- matrix(0, ncol=n, nrow=n)
fi <- matrix(0, ncol = q, nrow = n)
x <- matrix(0, ncol=q, nrow=n)
for (i in 1:n) {
x[i, ] <- tx[i, ] - ex[e, ]
}
for (j in 1:q) {
fi[, j] <- x[, j]/h[j]
kfi <- kk(fi)
}
for (k in 1:n) {
K[k, k] <- prod(kfi[k, ])
}
X <- cbind(ones, x)
thetahat[, e] <- solve(t(X)%*%K%*%X)%*%t(X)%*%K%*%ty
}
return(kfi)
}
llls(ty=ty, tx=tx, ey=ey, ex=ex, h=h)
ty
h
ones
X <- cbind(ones, x)
ty <- matrix(10, ncol = 1, nrow = 10)
ey <- matrix(5, ncol = 1, nrow = 1)
tx <- matrix(5, ncol = 2, nrow = 10)
ex <- matrix(1, ncol = 2, nrow = 1)
h <- c(1,1)
kk <- function(g) (1/sqrt(2*pi))*exp(-0.5*g^2)
llls <- function(ty,tx,h,ey,ex){
n <- length(ty)
ne <- length(ey)
q <- ncol(tx)
q1 <- q+1
ones <- rep(1,n)
thetahat <- matrix(0,ncol=ne,nrow=q1)
for(e in 1:ne){
K <- matrix(0, ncol=n, nrow=n)
fi <- matrix(0, ncol = q, nrow = n)
x <- matrix(0, ncol=q, nrow=n)
for (i in 1:n) {
x[i, ] <- tx[i, ] - ex[e, ]
}
for (j in 1:q) {
fi[, j] <- x[, j]/h[j]
kfi <- kk(fi)
}
for (k in 1:n) {
K[k, k] <- prod(kfi[k, ])
}
X <- cbind(ones, x)
#thetahat[, e] <- solve(t(X)%*%K%*%X)%*%t(X)%*%K%*%ty
}
return(kfi)
}
llls(ty=ty, tx=tx, ey=ey, ex=ex, h=h)
library(plotly)
server <- function(input, output) {
select1 <- reactive({
select(sample, input$varible1)
})
select2 <- reactive({
select(sample, input$varible2)
})
select21 <- reactive({
select(sample, input$varible21)
})
select22 <- reactive({
select(sample, input$varible22)
})
output$mytable1 = renderDT(
sample #, options = list(lengthChange = FALSE)
)
output$mytable2 = renderDT(
sample2#, options = list(lengthChange = FALSE)
)
output$mytable3 = renderDT(
sample, options = list(lengthChange = FALSE)
)
output$textWithHTML <- renderUI({     # use to create new line from txt to html
splitText <- stringi::stri_split(str = rawText, regex = '\\n')
replacedText <- lapply(splitText, p)
return(replacedText)
})
output$plot1 <- plotly::renderPlotly({
if (is.character(select1()[1, 1])) {
if (is.character(select2()[1, 1])) {
plotOutcome <- ggplot(data = sample) +
geom_count(aes(
x = get(input$varible1),
y = get(input$varible2)
))
}
else {
plotOutcome <- ggplot(data = sample) +
geom_col(aes(
x = get(input$varible1),
y = get(input$varible2)
))
}
}
else {
if (is.character(select2()[1, 1])) {
plotOutcome <- ggplot(data = sample) +
geom_col(aes(
x = get(input$varible1),
y = get(input$varible2)
))
}
else {
plotOutcome <- ggplot(data = sample) +
geom_smooth(aes(
x = get(input$varible1),
y = get(input$varible2)
))
}
}
plotly::ggplotly(plotOutcome)
})
output$plot2 <- plotly::renderPlotly({
if (is.character(select21()[1, 1])) {
if (is.character(select22()[1, 1])) {
plotOutcome <- ggplot(data = sample2) +
geom_count(aes(
x = get(input$varible21),
y = get(input$varible22)
))
}
else {
plotOutcome <- ggplot(data = sample2) +
geom_col(aes(
x = get(input$varible21),
y = get(input$varible22)
))
}
}
else {
if (is.character(select22()[1, 1])) {
plotOutcome <- ggplot(data = sample2) +
geom_col(aes(
x = get(input$varible21),
y = get(input$varible22)
))
}
else {
plotOutcome <- ggplot(data = sample2) +
geom_smooth(aes(
x = get(input$varible21),
y = get(input$varible22)
))
}
}
plotly::ggplotly(plotOutcome)
})
}
library(shiny); runApp('app_final.R')
library(shiny); runApp('app_final.R')
